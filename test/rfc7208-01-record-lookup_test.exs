defmodule Rfc7208.Section1Test do
  use ExUnit.Case

  # Generated by mix rfc7208.testsuite
  # Usage:
  # % mix test
  # % mix test --only set:1
  # % mix test --only tst:1.y where y is in [0..6]

  describe "rfc7208-01-record-lookup" do
    @tag set: "1"
    @tag tst: "1.0"
    test "1.0 alltimeout" do
      # spec 4.4/2 - Record lookup - alltimeout
      _cli = """
      spfcheck foo@alltimeout.example.net -i 1.2.3.4 -h mail.example.net -v 5 \
       -d test/zones/rfc7208-01-record-lookup.zonedata
      """

      ctx =
        Spf.check("foo@alltimeout.example.net",
          helo: "mail.example.net",
          ip: "1.2.3.4",
          dns: "test/zones/rfc7208-01-record-lookup.zonedata"
        )

      assert to_string(ctx.verdict) in ["temperror"]
      assert ctx.explanation == ""
    end

    @tag set: "1"
    @tag tst: "1.1"
    test "1.1 both" do
      # spec 4.4/1 - Record lookup - both
      _cli = """
      spfcheck foo@both.example.net -i 1.2.3.4 -h mail.example.net -v 5 \
       -d test/zones/rfc7208-01-record-lookup.zonedata
      """

      ctx =
        Spf.check("foo@both.example.net",
          helo: "mail.example.net",
          ip: "1.2.3.4",
          dns: "test/zones/rfc7208-01-record-lookup.zonedata"
        )

      assert to_string(ctx.verdict) in ["fail"]
      assert ctx.explanation == ""
    end

    @tag set: "1"
    @tag tst: "1.2"
    test "1.2 nospftxttimeout" do
      # spec 4.4/1 - Record lookup - nospftxttimeout
      _cli = """
      spfcheck foo@nospftxttimeout.example.net -i 1.2.3.4 -h mail.example.net -v 5 \
       -d test/zones/rfc7208-01-record-lookup.zonedata
      """

      ctx =
        Spf.check("foo@nospftxttimeout.example.net",
          helo: "mail.example.net",
          ip: "1.2.3.4",
          dns: "test/zones/rfc7208-01-record-lookup.zonedata"
        )

      assert to_string(ctx.verdict) in ["temperror"]
      assert ctx.explanation == ""
    end

    @tag set: "1"
    @tag tst: "1.3"
    test "1.3 spfonly" do
      # spec 4.4/1 - Record lookup - spfonly
      _cli = """
      spfcheck foo@spfonly.example.net -i 1.2.3.4 -h mail.example.net -v 5 \
       -d test/zones/rfc7208-01-record-lookup.zonedata
      """

      ctx =
        Spf.check("foo@spfonly.example.net",
          helo: "mail.example.net",
          ip: "1.2.3.4",
          dns: "test/zones/rfc7208-01-record-lookup.zonedata"
        )

      assert to_string(ctx.verdict) in ["none"]
      assert ctx.explanation == ""
    end

    @tag set: "1"
    @tag tst: "1.4"
    test "1.4 spftimeout" do
      # spec 4.4/1 - Record lookup - spftimeout
      _cli = """
      spfcheck foo@spftimeout.example.net -i 1.2.3.4 -h mail.example.net -v 5 \
       -d test/zones/rfc7208-01-record-lookup.zonedata
      """

      ctx =
        Spf.check("foo@spftimeout.example.net",
          helo: "mail.example.net",
          ip: "1.2.3.4",
          dns: "test/zones/rfc7208-01-record-lookup.zonedata"
        )

      assert to_string(ctx.verdict) in ["fail"]
      assert ctx.explanation == ""
    end

    @tag set: "1"
    @tag tst: "1.5"
    test "1.5 txtonly" do
      # spec 4.4/1 - Record lookup - txtonly
      _cli = """
      spfcheck foo@txtonly.example.net -i 1.2.3.4 -h mail.example.net -v 5 \
       -d test/zones/rfc7208-01-record-lookup.zonedata
      """

      ctx =
        Spf.check("foo@txtonly.example.net",
          helo: "mail.example.net",
          ip: "1.2.3.4",
          dns: "test/zones/rfc7208-01-record-lookup.zonedata"
        )

      assert to_string(ctx.verdict) in ["fail"]
      assert ctx.explanation == ""
    end

    @tag set: "1"
    @tag tst: "1.6"
    test "1.6 txttimeout" do
      # spec 4.4/1 - Record lookup - txttimeout
      _cli = """
      spfcheck foo@txttimeout.example.net -i 1.2.3.4 -h mail.example.net -v 5 \
       -d test/zones/rfc7208-01-record-lookup.zonedata
      """

      ctx =
        Spf.check("foo@txttimeout.example.net",
          helo: "mail.example.net",
          ip: "1.2.3.4",
          dns: "test/zones/rfc7208-01-record-lookup.zonedata"
        )

      assert to_string(ctx.verdict) in ["temperror"]
      assert ctx.explanation == ""
    end
  end
end
