defmodule Rfc7208.Section0Test do
  use ExUnit.Case

  # Generated by mix rfc7208.testsuite
  # Usage:
  # % mix test
  # % mix test --only set:0
  # % mix test --only tst:0.y where y is in [0..13]

  describe "rfc7208-00-initial-processing" do
    @tag set: "0"
    @tag tst: "0.0"
    test "0.0 control-char-policy" do
      # spec 4.6.1/2 - Initial processing - control-char-policy

      ctx =
        Spf.check("foobar@ctrl.example.com",
          helo: "hosed",
          ip: "192.0.2.3",
          dns: "test/zones/rfc7208-00-initial-processing.zonedata"
        )

      assert to_string(ctx.verdict) in ["permerror"]
      assert ctx.explanation == ""
    end

    @tag set: "0"
    @tag tst: "0.1"
    test "0.1 domain-literal" do
      # spec 4.3/1 - Initial processing - domain-literal

      ctx =
        Spf.check("foo@[1.2.3.5]",
          helo: "OEMCOMPUTER",
          ip: "1.2.3.5",
          dns: "test/zones/rfc7208-00-initial-processing.zonedata"
        )

      assert to_string(ctx.verdict) in ["none"]
      assert ctx.explanation == ""
    end

    @tag set: "0"
    @tag tst: "0.2"
    test "0.2 emptylabel" do
      # spec 4.3/1 - Initial processing - emptylabel

      ctx =
        Spf.check("lyme.eater@A...example.com",
          helo: "mail.example.net",
          ip: "1.2.3.5",
          dns: "test/zones/rfc7208-00-initial-processing.zonedata"
        )

      assert to_string(ctx.verdict) in ["none"]
      assert ctx.explanation == ""
    end

    @tag set: "0"
    @tag tst: "0.3"
    test "0.3 helo-domain-literal" do
      # spec 4.3/1 - Initial processing - helo-domain-literal

      ctx =
        Spf.check("",
          helo: "[1.2.3.5]",
          ip: "1.2.3.5",
          dns: "test/zones/rfc7208-00-initial-processing.zonedata"
        )

      assert to_string(ctx.verdict) in ["none"]
      assert ctx.explanation == ""
    end

    @tag set: "0"
    @tag tst: "0.4"
    test "0.4 helo-not-fqdn" do
      # spec 4.3/1 - Initial processing - helo-not-fqdn

      ctx =
        Spf.check("",
          helo: "A2345678",
          ip: "1.2.3.5",
          dns: "test/zones/rfc7208-00-initial-processing.zonedata"
        )

      assert to_string(ctx.verdict) in ["none"]
      assert ctx.explanation == ""
    end

    @tag set: "0"
    @tag tst: "0.5"
    test "0.5 longlabel" do
      # spec 4.3/1 - Initial processing - longlabel

      ctx =
        Spf.check(
          "lyme.eater@A12345678901234567890123456789012345678901234567890123456789012.example.com",
          helo: "mail.example.net",
          ip: "1.2.3.5",
          dns: "test/zones/rfc7208-00-initial-processing.zonedata"
        )

      assert to_string(ctx.verdict) in ["fail"]
      assert ctx.explanation == ""
    end

    @tag set: "0"
    @tag tst: "0.6"
    test "0.6 nolocalpart" do
      # spec 4.3/2 - Initial processing - nolocalpart

      ctx =
        Spf.check("@example.net",
          helo: "mail.example.net",
          ip: "1.2.3.4",
          dns: "test/zones/rfc7208-00-initial-processing.zonedata"
        )

      assert to_string(ctx.verdict) in ["fail"]
      assert ctx.explanation == "postmaster"
    end

    @tag set: "0"
    @tag tst: "0.7"
    test "0.7 non-ascii-mech" do
      # spec 3.1/1 - Initial processing - non-ascii-mech

      ctx =
        Spf.check("foobar@hosed2.example.com",
          helo: "hosed",
          ip: "1.2.3.4",
          dns: "test/zones/rfc7208-00-initial-processing.zonedata"
        )

      assert to_string(ctx.verdict) in ["permerror"]
      assert ctx.explanation == ""
    end

    @tag set: "0"
    @tag tst: "0.8"
    test "0.8 non-ascii-non-spf" do
      # spec 4.5/1 - Initial processing - non-ascii-non-spf

      ctx =
        Spf.check("foobar@nothosed.example.com",
          helo: "hosed",
          ip: "1.2.3.4",
          dns: "test/zones/rfc7208-00-initial-processing.zonedata"
        )

      assert to_string(ctx.verdict) in ["fail"]
      assert ctx.explanation == ""
    end

    @tag set: "0"
    @tag tst: "0.9"
    test "0.9 non-ascii-policy" do
      # spec 3.1/1 - Initial processing - non-ascii-policy

      ctx =
        Spf.check("foobar@hosed.example.com",
          helo: "hosed",
          ip: "1.2.3.4",
          dns: "test/zones/rfc7208-00-initial-processing.zonedata"
        )

      assert to_string(ctx.verdict) in ["permerror"]
      assert ctx.explanation == ""
    end

    @tag set: "0"
    @tag tst: "0.10"
    test "0.10 non-ascii-result" do
      # spec 3.1/1 - Initial processing - non-ascii-result

      ctx =
        Spf.check("foobar@hosed3.example.com",
          helo: "hosed",
          ip: "1.2.3.4",
          dns: "test/zones/rfc7208-00-initial-processing.zonedata"
        )

      assert to_string(ctx.verdict) in ["permerror"]
      assert ctx.explanation == ""
    end

    @tag set: "0"
    @tag tst: "0.11"
    test "0.11 toolonglabel" do
      # spec 4.3/1 - Initial processing - toolonglabel

      ctx =
        Spf.check(
          "lyme.eater@A123456789012345678901234567890123456789012345678901234567890123.example.com",
          helo: "mail.example.net",
          ip: "1.2.3.5",
          dns: "test/zones/rfc7208-00-initial-processing.zonedata"
        )

      assert to_string(ctx.verdict) in ["none"]
      assert ctx.explanation == ""
    end

    @tag set: "0"
    @tag tst: "0.12"
    test "0.12 trailing-space" do
      # spec 4.5/2 - Initial processing - trailing-space

      ctx =
        Spf.check("silly@trail.example.com",
          helo: "hosed",
          ip: "192.0.2.5",
          dns: "test/zones/rfc7208-00-initial-processing.zonedata"
        )

      assert to_string(ctx.verdict) in ["fail"]
      assert ctx.explanation == ""
    end

    @tag set: "0"
    @tag tst: "0.13"
    test "0.13 two-spaces" do
      # spec 4.6.1 - Initial processing - two-spaces

      ctx =
        Spf.check("actually@fine.example.com",
          helo: "hosed",
          ip: "1.2.3.4",
          dns: "test/zones/rfc7208-00-initial-processing.zonedata"
        )

      assert to_string(ctx.verdict) in ["fail"]
      assert ctx.explanation == ""
    end
  end
end
